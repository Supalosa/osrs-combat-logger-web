import { Button, Container, Flex, Input, Progress } from "@mantine/core";
import { useState } from "react";

type LogInputProps = {
    onLogUploaded: (logContents: string) => void;
};

type Progress = {
    loaded: number;
    total: number;
};

export const LogInput = ({ onLogUploaded }: LogInputProps) => {
    const [files, setFiles] = useState<FileList | null>(null);
    const [progress, setProgress] = useState<Progress | null>(null);
    const [uploaded, setUploaded] = useState(false);

    const readFile = (event: React.ChangeEvent<HTMLInputElement>) => {
        setFiles(event?.target?.files);
    };

    const onAnalyze = () => {
        const file: File | undefined = files?.[0];
        setUploaded(false);
        if (file) {
            const reader: FileReader = new FileReader();
            reader.readAsText(file);
            reader.addEventListener("progress", ({ loaded, total }) => {
                setProgress({ loaded, total });
            });
            reader.addEventListener("loadend", () => {
                setProgress(null);
            });
            reader.addEventListener("load", () => {
                if (reader.result != null) {
                    setUploaded(true);
                    onLogUploaded(reader.result.toString().trim());
                }
            });
        }
    };

    return (
        <Flex direction="column" gap={8}>
            <h2>Analyze an OSRS Combat Log</h2>
            <p>
                These files are generated by the Combat Logger plugin in
                Runelite. Find it in the Plugin Hub!
            </p>
            <Input type="file" onChange={readFile} />
            <Button
                color="blue"
                onClick={onAnalyze}
                disabled={progress != null}
            >
                Analyze
            </Button>
            {!!progress && (
                <Progress
                    size="xl"
                    color="green"
                    label="Reading log..."
                    value={
                        (progress.loaded / Math.max(1, progress.total)) * 100
                    }
                    animate
                />
            )}
            {uploaded && (
                <Progress size="xl" color="green" label="Done" value={100} />
            )}
        </Flex>
    );
};
